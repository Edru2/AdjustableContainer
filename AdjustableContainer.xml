<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<Script isActive="yes" isFolder="no">
			<name>AdjustableContainer</name>
			<packageName></packageName>
			<script>--Adjustable Container V1.3
--Just use it like a normal Geyser Container with some extras like: 
--moveable, adjustable size, attach to borders, minimizeable, save/load...
--right click on top border for menu
--Inspired heavily by Adjustable Label, GUIFrame and EMCO
--by Edru 27Feb2020

Adjustable = Adjustable or {}
Adjustable.Container = Adjustable.Container or Geyser.Container:new({
  name = "AdjustableContainerClass",})
local adjustInfo

local function make_percent(num)
  num = num * 100
  num = tostring(num).."%"
  return num
end

local function shrink_title(lbl)
    local  w  =  lbl:get_width()
    local titleText = lbl.titleText
    if #titleText &lt;= 15 then titleText = titleText.."   " end
    if w &lt; (#titleText-10)*6.6+20 then
      titleText = string.sub(lbl.titleText,0,math.floor(w/6)).."..."
    end
    if #titleText &lt;= 15 then titleText="" end
      lbl.adjLabel:echo(titleText,lbl.titleTxtColor,"l")
end
  
function Adjustable.Container:setTitle(text,color)
    text = text or self.name.." - Adjustable Container"
    self.titleTxtColor = color or "green"
    self.titleText = "&amp;nbsp;&amp;nbsp;"..text
    shrink_title(self)
end


function Adjustable.Container:finishPercent (size_as_percent, position_as_percent)
  local x, y, w, h = self:get_x(), self:get_y(), self:get_width(), self:get_height()
  local winw, winh = getMainWindowSize()
  if (self.container) and (self.container ~= Geyser) then
    x,y = x-self.container.get_x(),y-self.container.get_y()
    winw, winh = self.container.get_width(), self.container.get_height()
  end
  x, y, w, h = make_percent(x/winw), make_percent(y/winh), make_percent(w/winw), make_percent(h/winh)
  if size_as_percent then self:resize(w,h) end
  if position_as_percent then self:move(x,y) end
end

function Adjustable.Container:onClick(event)
 self.rCLabel:hide()
  if event.button == "LeftButton" and not(self.locked) then
      local x, y = getMousePosition()
      local w, h = self.adjLabel:get_width(), self.adjLabel:get_height()
      local x1, y1 = x - event.x, y - event.y
      local x2, y2 = x1 + w, y1 + h
      local left, right, top, bottom = event.x &lt;= 10, x &gt;= x2 - 10, event.y &lt;= 3, y &gt;= y2 - 10
      if right and left then left = false end
      if top and bottom then top = false end
      local move = not (right or left or top or bottom)
      if self.minimized then move = true end
      adjustInfo = {name = self.adjLabel.name, top = top, bottom = bottom, left = left, right = right, move = move, x = x, y = y}
  end
  if event.button == "RightButton" then
      if self.hideTimer then killTimer(self.hideTimer) end
      self.hideTimer = tempTimer(5,function() self.rCLabel:hide()end)
      self.rCLabel:move(event.x,event.y)
      self.rCLabel:show()
      if self.container == Geyser then
        for i=1,#self.att do
          self.att[i]:hide()
        end
        self.attLabel:raise()
      end
      for i=1, #self.locksl do
        self.locksl[i]:hide()
      end
      self.lockLabel:raise()
      self.minLabel:raise()
      self.saveLabel:raise()
      self.loadLabel:raise()
      self.lockSLabel:raise()
  end
end

function Adjustable.Container:onRelease (event)
  if event.button == "LeftButton"  and adjustInfo and adjustInfo.name == self.adjLabel.name then
      adjustInfo = nil
  end
  Adjustable.Container.finishPercent(self,true,true)
end

function Adjustable.Container:onMove (event)
  if adjustInfo and adjustInfo.name == self.adjLabel.name then
      self:adjustBorder()
      local x, y = getMousePosition()
      local winw, winh = getMainWindowSize()
      local x1, y1, w, h = self.get_x(), self.get_y(), self:get_width(), self:get_height()
      if (self.container) and (self.container ~= Geyser) then
        --x,y = 
        x1,y1 = x1-self.container.get_x(), y1-self.container.get_y()
        winw, winh = self.container.get_width(), self.container.get_height()
      end
      local dx, dy = adjustInfo.x - x, adjustInfo.y - y
      local max, min = math.max, math.min
      if adjustInfo.move then
          local tx, ty = max(0,x1-dx), max(0,y1-dy)
          tx, ty = min(tx, winw - w), min(ty, winh - h)
          self:move(tx, ty)
          --[[
          if x1-dx &lt;-5 then self:attachToBorder("left") end
          if y1-dy &lt;-5 then self:attachToBorder("top") end
          if winw - w &lt; tx+0.1 then self:attachToBorder("right") end
          if winh - h &lt; ty+0.1 then self:attachToBorder("bottom") end--]]
      else
          local w2, h2, x2, y2 = w - dx, h - dy, x1 - dx, y1 - dy
          local tx, ty, tw, th = x1, y1, w, h
          if adjustInfo.top then
              ty, th = y2, h + dy
          elseif adjustInfo.bottom then
              th = h2
          end
          if adjustInfo.left then
              tx, tw = x2, w + dx
          elseif adjustInfo.right then
              tw = w2
          end
          tx, ty, tw, th = max(0,tx), max(0,ty), max(10,tw), max(10,th)
          tw, th = min(tw, winw), min(th, winh)
          tx, ty = min(tx, winw-tw), min(ty, winh-th)
          self:move(tx, ty)
          local minw, minh = 0,0
          if self.container == Geyser then minw, minh = 75,25 end
          self:resize(max(minw,tw), max(minh,th))
          shrink_title(self)
      end
      adjustInfo.x, adjustInfo.y = x, y
  end
end

function Adjustable.Container:fPos()
  local winw, winh = getMainWindowSize()
  local fpos = ""
  if  (winh*0.8)-self.get_height()&lt;= self.get_y()  then  fpos = fpos.."bottom," end
  if  (winw*0.8)-self.get_width() &lt;= self.get_x() then  fpos = fpos.."right," end
  if self.get_y() &lt;= winh*0.2 then fpos = fpos.."top," end
  if self.get_x() &lt;= winw*0.2 then fpos = fpos.."left" end
  return fpos
end

function Adjustable.Container:adjustBorder()
  local winw, winh = getMainWindowSize()
  local where = false
  if type(self.attached) == "string" then 
    where = self.attached:lower()
    if string.find(self:fPos(),where) == nil or self.minimized or self.hidden then self:detach()
    else
      if        where == "right"   then setBorderRight(winw-self.get_x()) 
        elseif  where == "left"    then setBorderLeft(self.get_width()+self.get_x())  
        elseif  where == "bottom"  then setBorderBottom(winh-self.get_y())  
        elseif  where == "top"     then setBorderTop(self.get_height()+self.get_y()) 
        else self.attached= false 
      end
    end
    else
      return false
  end
end

function Adjustable.Container:resizeBorder()
  local winw, winh = getMainWindowSize()
  self.timer_active = self.timer_active or true
  -- Check if Window resize is happened. 
  -- If that is not checked this creates an infinite loop and chrashes because setBorder also causes a resize event 
  if winw ~= self.oldvalue and self.timer_active then
    self.timer_active = false
    tempTimer(0.2, function() self:adjustBorder() end)
  end
  self.oldvalue = winw
end
 
function Adjustable.Container:attachToBorder(border)
    if self.attached then self:detach() end  
    self.attached = border
    self:adjustBorder()
    self.resizeHandlerID=registerAnonymousEventHandler("sysWindowResizeEvent", function() self:resizeBorder() end)
end

function Adjustable.Container:detach()  
    self:resetBorder(self.attached)
    self.attached=false
    if self.resizeHandlerID then killAnonymousEventHandler(self.resizeHandlerID) end
end

function Adjustable.Container:resetBorder(where)
    if        where == "right"   then setBorderRight(0) 
      elseif  where == "left"    then setBorderLeft(0)  
      elseif  where == "bottom"  then setBorderBottom(0)  
      elseif  where == "top"     then setBorderTop(0)
    end
end

function Adjustable.Container:createContainers()
  self.adjLabel = Geyser.Label:new({
      x = "0",
      y = "0",
      height = "100%",
      width = "100%",
      color = "green"
  },self)
  self.Inside = Geyser.Container:new({
      x = self.padding,
      y = self.padding*2,
      height = "-"..self.padding,
      width = "-"..self.padding,
  },self)
end

function Adjustable.Container:lockContainer(lockStyle)
  self.rCLabel:hide()
  if lockStyle then self.lockStyle = lockStyle end
  if self.minimized == false then
    self.lockStylef[self.lockStyle](self)
    self.exitLabel:hide()
    self.minimizeLabel:hide()
    self.locked = true
    self:adjustBorder()
  end
end

function Adjustable.Container:unlockContainer()
  self.rCLabel:hide()
  shrink_title(self)
  self.Inside:resize("-"..self.padding,"-"..self.padding)
  self.Inside:move(self.padding, self.padding*2)
  self.adjLabel:setStyleSheet(self.adjLabelstyle)
  self.exitLabel:show()
  self.minimizeLabel:show()
  self.locked = false
end

function Adjustable.Container:setPadding(padding)
  self.padding = padding
  if self.locked then
    self:lockContainer()
  else
    self:unlockContainer()
  end 
end

function Adjustable.Container:onClickL()
  if self.locked == true then
    self:unlockContainer()
  else
    self:lockContainer()
  end
end


function Adjustable.Container:hideObj(event)
  self:hide()
  self:adjustBorder()
end

function Adjustable.Container:onClickMin()
  self.rCLabel:hide()
  if self.minimized == false then
    self:minimize()
  else
    self:restore()
  end
end

function Adjustable.Container:onClickSave()
  self.rCLabel:hide()
  self:save()
end

function Adjustable.Container:onClickLoad()
  self.rCLabel:hide()
  self:load()
end

function Adjustable.Container:minimize()
  if self.minimized == false and self.locked == false then
      self.origh = self.height
      self.Inside:hide()
      self:resize(nil,25)
      self.minimized = true
      self:adjustBorder()
  end
end

function Adjustable.Container:restore()
  if self.minimized == true then
      self.origh = self.origh or "25%"
      self.Inside:show()
      self:resize(nil,self.origh)
      self.minimized = false
      self:adjustBorder()
  end
end


function Adjustable.Container:onLeaveColor(txt,color)
  color = color or "black"
  self:echo(txt,color,"l")
end

function Adjustable.Container:onEnterColor(txt,color)
  color = color or "white"
  self:echo(txt,color,"l")
end

function Adjustable.Container:onClickAtt()
    for i=1, #self.locksl do
      self.locksl[i]:hide()
    end
    local attm = string.split(self:fPos(), ",")
    local j = 1
    if self.hideTimer then killTimer(self.hideTimer) end
       self.hideTimer = tempTimer(5,function() self.rCLabel:hide()end)
    for i=1,#attm do
      self.att[math.min(3,i)].hidden = true
      if attm[i] ~= "" and j &lt; 4 then
        self.att[j]:echo("&lt;center&gt;"..attm[i],"black","l")
        self.att[j]:show()
        self.att[j]:raise()
        self.att[j]:setClickCallback("Adjustable.Container.chBorder", self, attm[i])
        j=j+1
      end
    end  
end

function Adjustable.Container:onClickLStyle()
    for i=1,#self.att do
      self.att[i]:hide()
    end
    local j = 1
    if self.hideTimer then killTimer(self.hideTimer) end
    self.hideTimer = tempTimer(5,function() self.rCLabel:hide()end)
    for i=1,#self.locksl do self.locksl[i].hidden = true end   
    for k,v in pairs(self.lockStylef) do
      if j &gt; 5 then break end
      self.locksl[j]:echo("&lt;center&gt;"..k,"black","l")
      self.locksl[j]:show()
      self.locksl[j]:raise()
      self.locksl[j]:setClickCallback([[Adjustable.Container.lockContainer]], self, k)
      j=j+1
    end
end

function Adjustable.Container:chBorder(side)
    self:attachToBorder(side)
    self.rCLabel:hide()   
end

function Adjustable.Container:createLabels()
  self.exitLabel = Geyser.Label:new({
  x=-25,y=4,width = "15", height = "15",fontSize=8

  },self)
  self.exitLabel:echo("&lt;center&gt;x&lt;/center&gt;")


  self.minimizeLabel = Geyser.Label:new({
  x=-45,y=4,width = "15", height = "15",fontSize=8

  },self)
  self.minimizeLabel:echo("&lt;center&gt;-&lt;/center&gt;")
  
  --rightClick Label creation
  self.rCLabel = Geyser.Label:new({
  x=-45,y=4,width = "200", height = "120",fontSize=8

  },self)

  self.lockLabel = Geyser.Label:new({
  x=0,y=0,width = "100", height = "20",fontSize=8,color="white"

  },self.rCLabel)
  
  self.minLabel = Geyser.Label:new({
  x=0,y=20,width = "100", height = "20",fontSize=8,color="white"

  },self.rCLabel)

  self.saveLabel = Geyser.Label:new({
  x=0,y=40,width = "100", height = "20",fontSize=8,color="white"
  },self.rCLabel)
  
  self.loadLabel = Geyser.Label:new({
  x=0,y=60,width = "100", height = "20",fontSize=8,color="white"
  },self.rCLabel)
  
  if self.container == Geyser then
      self.attLabel = Geyser.Label:new({
      x=0,y=80,width = "100", height = "20",fontSize=8,color="white"
      },self.rCLabel)
      
      self.att[1] = Geyser.Label:new({
      x=100,y=80,width = "80", height = "20",fontSize=8,color="white"
      },self.rCLabel)
      
      self.att[2] = Geyser.Label:new({
      x=100,y=60,width = "80", height = "20",fontSize=8,color="white"
      },self.rCLabel)
      
      self.att[3] = Geyser.Label:new({
      x=100,y=40,width = "80", height = "20",fontSize=8,color="white"
      },self.rCLabel)
      
      self.lockSLabel = Geyser.Label:new({
      x=0,y=100,width = "100", height = "20",fontSize=8,color="white"
      },self.rCLabel)
      for i=1,6 do
        self.locksl[i] = Geyser.Label:new({
        x=100,y=120-(i*20),width = "80", height = "20",fontSize=8,color="white"
        },self.rCLabel)
      end
  else
      self.lockSLabel = Geyser.Label:new({
      x=0,y=80,width = "100", height = "20",fontSize=8,color="white"
      },self.rCLabel)
      for i=1,5 do
        self.locksl[i] = Geyser.Label:new({
        x=100,y=100-(i*20),width = "80", height = "20",fontSize=8,color="white"
        },self.rCLabel)
      end
  end 
  self.rCLabel:hide()
end
  
function Adjustable.Container:styleLabels()
  if self.container == Geyser then
    self.attLabel.txt=string.format(self.formatL,"⚓","Attach to:")
    self.attLabel:setClickCallback("Adjustable.Container.onClickAtt",self)
  end
  for k,v in pairs (self.rCLabel.windowList) do
    v:setStyleSheet(self.menustyle)
    v:echo(v.txt, "black", "l")
    setLabelOnEnter(k,"Adjustable.Container.onEnterColor", v, v.txt, nil)
    setLabelOnLeave(k,"Adjustable.Container.onLeaveColor", v, v.txt, nil)
  end
end

function Adjustable.Container:add(window,cons)
  Geyser.Container.add(self,window,cons)
  --Add new Windows to the Inside Container
  local wnr = self.wnr
  wnr = wnr or 555
  wnr = wnr + 1
  --Add new Windows to the Inside Container
  if self.windows[wnr] ~= nil then self.Inside:add(self.windowList[self.windows[wnr]]) end
end

function Adjustable.Container:show(auto)
  Geyser.Container.show(self, auto)
  self.rCLabel:hide()
end

function Adjustable.Container:save()
  local mytable = {}
  mytable.x = self.x
  mytable.y = self.y
  mytable.height= self.height
  mytable.width= self.width
  mytable.minimized= self.minimized
  mytable.origh= self.origh
  mytable.locked = self.locked
  mytable.attached = self.attached
  mytable.lockStyle = self.lockStyle
  mytable.padding = self.padding
  if not(io.exists(getMudletHomeDir().."/AdjContainer/")) then lfs.mkdir(getMudletHomeDir().."/AdjContainer/") end
  table.save(getMudletHomeDir().."/AdjContainer/"..self.name..".lua", mytable)
end

function Adjustable.Container:load()
  local mytable = {}
  if io.exists(getMudletHomeDir().."/AdjContainer/"..self.name..".lua") then
      table.load(getMudletHomeDir().."/AdjContainer/"..self.name..".lua", mytable)
  end
  self.lockStyle = mytable.lockStyle or self.lockStyle
  self.padding = mytable.padding or self.padding
  if mytable.x then
      self:move(mytable.x,mytable.y)
      self:resize(mytable.width,mytable.height)
      self.minimized = mytable.minimized
  if mytable.locked == true then self:lockContainer()  else self:unlockContainer() end
  if self.minimized == true then self.Inside:hide() self:resize(nil,25) else self.Inside:show() end
      self.origh = mytable.origh
  end
  if mytable.attached then self:attachToBorder(mytable.attached) end
  self:adjustBorder()
  self:show()
end

function Adjustable.Container:reposition()
  Geyser.Container.reposition(self)
  if self.titleText and not(self.locked) then
    shrink_title(self)
  end
end

function Adjustable.Container.saveAll(cont)
  cont = cont or Geyser
  for  k,v in pairs(cont.windowList) do
    if v.type == "adjustablecontainer" then 
      v:save()
    end
    print(v.name)
    Adjustable.Container.saveAll(v)
  end
end

function Adjustable.Container.loadAll(cont)
  cont = cont or Geyser
  for  k,v in pairs(cont.windowList) do
    if v.type == "adjustablecontainer" then 
      v:load()
    end
    Adjustable.Container.loadAll(v)
  end
end

Adjustable.Container.lockStylef = Adjustable.Container.lockStylef or {}
Adjustable.Container.lockStylef["standard"] = function (s) 
    s.Inside:resize("100%",-1)
    s.Inside:move(0,s.padding)
    s.adjLabel:setStyleSheet(s.adjLabelstyle..[[border: 0;]])
    s.adjLabel:echo("")
  end
  
Adjustable.Container.lockStylef["border"] = function (s) 
    s.Inside:resize("-"..s.padding,"-"..s.padding)
    s.Inside:move(s.padding, s.padding)
    s.adjLabel:setStyleSheet(s.adjLabelstyle)
    s.adjLabel:echo("")
  end
  
Adjustable.Container.lockStylef["full"] = function (s) 
    s.Inside:resize("100%","100%")
    s.Inside:move(0,0)
    s.adjLabel:echo("")
  end

Adjustable.Container.lockStylef["light"] = function (s)
    shrink_title(s)
    s.Inside:resize("-"..s.padding,"-"..s.padding)
    s.Inside:move(s.padding, s.padding*2)
    s.adjLabel:setStyleSheet(s.adjLabelstyle)
  end 
  
Adjustable.Container.parent = Geyser.Container

function Adjustable.Container:new(cons,container)
  local me = self.parent:new(cons,container)
  setmetatable(me, self)
  self.__index = self
  me.type = "adjustablecontainer"
  me.padding = me.padding or 10    
  me:createContainers()
  me.att = me.att or {}
  me.locksl = me.locksl or {}
  me:createLabels()
  --Resize if in a Container
  if container then
    me:move(0,0)
    me:resize((me.container:get_width()/me:get_width())*100, (me.container:get_height()/me:get_height())*100)
    me:finishPercent (true, true)
  end
 
  me.minimized = false
  me.locked = false
  me.formatL = [==[&lt;style&gt;
                span { font-size: 16px;}
                span a { font-size: 10px;}
                &lt;/style&gt;
                &lt;span&gt; %s&lt;a&gt; %s&lt;/a&gt;&lt;/span&gt;
                ]==]
  me.lockLabel.txt = string.format(me.formatL,"🔒","Lock/Unlock")
  me.minLabel.txt=string.format(me.formatL,"🗕","Min/Restore")
  me.saveLabel.txt =string.format(me.formatL,"💾","Save")
  me.loadLabel.txt =string.format(me.formatL,"📁","Load")
  me.lockSLabel.txt =string.format(me.formatL,"🖌️","Lockstyle")
  me.menustyle = me.menustyle or [[QLabel::hover{ background-color: rgba(0,150,255,100%); color: white;}]]
  me.labelsytle= me.labelsytle or [[
      QLabel{ border-radius: 7px; background-color: rgba(255,30,30,100%);}
      QLabel::hover{ background-color: rgba(255,0,0,50%);}
      ]]
  me.adjLabelstyle = me.adjLabelstyle or [[
      background-color: rgba(0,0,0,100%);
      border: 4px double green;
      border-radius: 4px;]]
  me.adjLabelstyle = me.adjLabelstyle..[[ qproperty-alignment: 'AlignLeft | AlignTop';]]
  me.adjLabel:setClickCallback("Adjustable.Container.onClick",me)
  me.adjLabel:setReleaseCallback("Adjustable.Container.onRelease",me)
  me.adjLabel:setMoveCallback("Adjustable.Container.onMove",me)
  
  me.adjLabel:setStyleSheet(me.adjLabelstyle)
  me.exitLabel:setStyleSheet(me.labelsytle)
  me.minimizeLabel:setStyleSheet(me.labelsytle)

  me.rCLabel:setStyleSheet([[background-color: rgba(0,0,0,0%);]])
  me:styleLabels()

  me.minLabel:setClickCallback("Adjustable.Container.onClickMin",me)
  me.saveLabel:setClickCallback("Adjustable.Container.onClickSave",me)
  me.lockLabel:setClickCallback("Adjustable.Container.onClickL",me)
  me.loadLabel:setClickCallback("Adjustable.Container.onClickLoad",me)
  me.lockSLabel:setClickCallback("Adjustable.Container.onClickLStyle",me)
  me.origh = me.height
  me.exitLabel:setClickCallback("Adjustable.Container.hideObj",me)
  me.minimizeLabel:setClickCallback("Adjustable.Container.onClickMin",me)
  me.wnr = #me.windows
  me:adjustBorder()
  me.titleTxtColor=me.titleTxtColor or "green"
  me.titleText=me.titleText or me.name.." - Adjustable Container"
  me.titleText = "&amp;nbsp;&amp;nbsp; "..me.titleText
  shrink_title(me)
  me.lockStyle = me.lockStyle or "standard"
  return me

end</script>
			<eventHandlerList />
		</Script>
	</ScriptPackage>
</MudletPackage>
